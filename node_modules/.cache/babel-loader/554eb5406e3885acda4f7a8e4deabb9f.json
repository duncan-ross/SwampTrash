{"ast":null,"code":"/**\r\n * request.js\r\n *\r\n * Request class contains server only options\r\n */\nvar parse_url = require('url').parse;\n\nvar Headers = require('./headers');\n\nvar Body = require('./body');\n\nmodule.exports = Request;\n/**\r\n * Request class\r\n *\r\n * @param   Mixed   input  Url or Request instance\r\n * @param   Object  init   Custom options\r\n * @return  Void\r\n */\n\nfunction Request(input, init) {\n  var url, url_parsed; // normalize input\n\n  if (!(input instanceof Request)) {\n    url = input;\n    url_parsed = parse_url(url);\n    input = {};\n  } else {\n    url = input.url;\n    url_parsed = parse_url(url);\n  } // normalize init\n\n\n  init = init || {}; // fetch spec options\n\n  this.method = init.method || input.method || 'GET';\n  this.redirect = init.redirect || input.redirect || 'follow';\n  this.headers = new Headers(init.headers || input.headers || {});\n  this.url = url; // server only options\n\n  this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n  this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n  this.counter = init.counter || input.counter || 0;\n  this.agent = init.agent || input.agent;\n  Body.call(this, init.body || this._clone(input), {\n    timeout: init.timeout || input.timeout || 0,\n    size: init.size || input.size || 0\n  }); // server request options\n\n  this.protocol = url_parsed.protocol;\n  this.hostname = url_parsed.hostname;\n  this.port = url_parsed.port;\n  this.path = url_parsed.path;\n  this.auth = url_parsed.auth;\n}\n\nRequest.prototype = Object.create(Body.prototype);\n/**\r\n * Clone this request\r\n *\r\n * @return  Request\r\n */\n\nRequest.prototype.clone = function () {\n  return new Request(this);\n};","map":{"version":3,"sources":["C:/Users/Gowal/Documents/GitHub/SwampTrash/node_modules/node-fetch/lib/request.js"],"names":["parse_url","require","parse","Headers","Body","module","exports","Request","input","init","url","url_parsed","method","redirect","headers","follow","undefined","compress","counter","agent","call","body","_clone","timeout","size","protocol","hostname","port","path","auth","prototype","Object","create","clone"],"mappings":"AACA;;;;;AAMA,IAAIA,SAAS,GAAGC,OAAO,CAAC,KAAD,CAAP,CAAeC,KAA/B;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AAEAI,MAAM,CAACC,OAAP,GAAiBC,OAAjB;AAEA;;;;;;;;AAOA,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,IAAxB,EAA8B;AAC7B,MAAIC,GAAJ,EAASC,UAAT,CAD6B,CAG7B;;AACA,MAAI,EAAEH,KAAK,YAAYD,OAAnB,CAAJ,EAAiC;AAChCG,IAAAA,GAAG,GAAGF,KAAN;AACAG,IAAAA,UAAU,GAAGX,SAAS,CAACU,GAAD,CAAtB;AACAF,IAAAA,KAAK,GAAG,EAAR;AACA,GAJD,MAIO;AACNE,IAAAA,GAAG,GAAGF,KAAK,CAACE,GAAZ;AACAC,IAAAA,UAAU,GAAGX,SAAS,CAACU,GAAD,CAAtB;AACA,GAX4B,CAa7B;;;AACAD,EAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf,CAd6B,CAgB7B;;AACA,OAAKG,MAAL,GAAcH,IAAI,CAACG,MAAL,IAAeJ,KAAK,CAACI,MAArB,IAA+B,KAA7C;AACA,OAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAAL,IAAiBL,KAAK,CAACK,QAAvB,IAAmC,QAAnD;AACA,OAAKC,OAAL,GAAe,IAAIX,OAAJ,CAAYM,IAAI,CAACK,OAAL,IAAgBN,KAAK,CAACM,OAAtB,IAAiC,EAA7C,CAAf;AACA,OAAKJ,GAAL,GAAWA,GAAX,CApB6B,CAsB7B;;AACA,OAAKK,MAAL,GAAcN,IAAI,CAACM,MAAL,KAAgBC,SAAhB,GACbP,IAAI,CAACM,MADQ,GACCP,KAAK,CAACO,MAAN,KAAiBC,SAAjB,GACdR,KAAK,CAACO,MADQ,GACC,EAFhB;AAGA,OAAKE,QAAL,GAAgBR,IAAI,CAACQ,QAAL,KAAkBD,SAAlB,GACfP,IAAI,CAACQ,QADU,GACCT,KAAK,CAACS,QAAN,KAAmBD,SAAnB,GAChBR,KAAK,CAACS,QADU,GACC,IAFlB;AAGA,OAAKC,OAAL,GAAeT,IAAI,CAACS,OAAL,IAAgBV,KAAK,CAACU,OAAtB,IAAiC,CAAhD;AACA,OAAKC,KAAL,GAAaV,IAAI,CAACU,KAAL,IAAcX,KAAK,CAACW,KAAjC;AAEAf,EAAAA,IAAI,CAACgB,IAAL,CAAU,IAAV,EAAgBX,IAAI,CAACY,IAAL,IAAa,KAAKC,MAAL,CAAYd,KAAZ,CAA7B,EAAiD;AAChDe,IAAAA,OAAO,EAAEd,IAAI,CAACc,OAAL,IAAgBf,KAAK,CAACe,OAAtB,IAAiC,CADM;AAEhDC,IAAAA,IAAI,EAAEf,IAAI,CAACe,IAAL,IAAahB,KAAK,CAACgB,IAAnB,IAA2B;AAFe,GAAjD,EAhC6B,CAqC7B;;AACA,OAAKC,QAAL,GAAgBd,UAAU,CAACc,QAA3B;AACA,OAAKC,QAAL,GAAgBf,UAAU,CAACe,QAA3B;AACA,OAAKC,IAAL,GAAYhB,UAAU,CAACgB,IAAvB;AACA,OAAKC,IAAL,GAAYjB,UAAU,CAACiB,IAAvB;AACA,OAAKC,IAAL,GAAYlB,UAAU,CAACkB,IAAvB;AACA;;AAEDtB,OAAO,CAACuB,SAAR,GAAoBC,MAAM,CAACC,MAAP,CAAc5B,IAAI,CAAC0B,SAAnB,CAApB;AAEA;;;;;;AAKAvB,OAAO,CAACuB,SAAR,CAAkBG,KAAlB,GAA0B,YAAW;AACpC,SAAO,IAAI1B,OAAJ,CAAY,IAAZ,CAAP;AACA,CAFD","sourcesContent":["\r\n/**\r\n * request.js\r\n *\r\n * Request class contains server only options\r\n */\r\n\r\nvar parse_url = require('url').parse;\r\nvar Headers = require('./headers');\r\nvar Body = require('./body');\r\n\r\nmodule.exports = Request;\r\n\r\n/**\r\n * Request class\r\n *\r\n * @param   Mixed   input  Url or Request instance\r\n * @param   Object  init   Custom options\r\n * @return  Void\r\n */\r\nfunction Request(input, init) {\r\n\tvar url, url_parsed;\r\n\r\n\t// normalize input\r\n\tif (!(input instanceof Request)) {\r\n\t\turl = input;\r\n\t\turl_parsed = parse_url(url);\r\n\t\tinput = {};\r\n\t} else {\r\n\t\turl = input.url;\r\n\t\turl_parsed = parse_url(url);\r\n\t}\r\n\r\n\t// normalize init\r\n\tinit = init || {};\r\n\r\n\t// fetch spec options\r\n\tthis.method = init.method || input.method || 'GET';\r\n\tthis.redirect = init.redirect || input.redirect || 'follow';\r\n\tthis.headers = new Headers(init.headers || input.headers || {});\r\n\tthis.url = url;\r\n\r\n\t// server only options\r\n\tthis.follow = init.follow !== undefined ?\r\n\t\tinit.follow : input.follow !== undefined ?\r\n\t\tinput.follow : 20;\r\n\tthis.compress = init.compress !== undefined ?\r\n\t\tinit.compress : input.compress !== undefined ?\r\n\t\tinput.compress : true;\r\n\tthis.counter = init.counter || input.counter || 0;\r\n\tthis.agent = init.agent || input.agent;\r\n\r\n\tBody.call(this, init.body || this._clone(input), {\r\n\t\ttimeout: init.timeout || input.timeout || 0,\r\n\t\tsize: init.size || input.size || 0\r\n\t});\r\n\r\n\t// server request options\r\n\tthis.protocol = url_parsed.protocol;\r\n\tthis.hostname = url_parsed.hostname;\r\n\tthis.port = url_parsed.port;\r\n\tthis.path = url_parsed.path;\r\n\tthis.auth = url_parsed.auth;\r\n}\r\n\r\nRequest.prototype = Object.create(Body.prototype);\r\n\r\n/**\r\n * Clone this request\r\n *\r\n * @return  Request\r\n */\r\nRequest.prototype.clone = function() {\r\n\treturn new Request(this);\r\n};\r\n"]},"metadata":{},"sourceType":"script"}