{"ast":null,"code":"/**\r\n * body.js\r\n *\r\n * Body interface provides common methods for Request and Response\r\n */\nvar convert = require('encoding').convert;\n\nvar bodyStream = require('is-stream');\n\nvar PassThrough = require('stream').PassThrough;\n\nvar FetchError = require('./fetch-error');\n\nmodule.exports = Body;\n/**\r\n * Body class\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\n\nfunction Body(body, opts) {\n  opts = opts || {};\n  this.body = body;\n  this.bodyUsed = false;\n  this.size = opts.size || 0;\n  this.timeout = opts.timeout || 0;\n  this._raw = [];\n  this._abort = false;\n}\n/**\r\n * Decode response as json\r\n *\r\n * @return  Promise\r\n */\n\n\nBody.prototype.json = function () {\n  var self = this;\n  return this._decode().then(function (buffer) {\n    try {\n      return JSON.parse(buffer.toString());\n    } catch (err) {\n      return Body.Promise.reject(new FetchError('invalid json response body at ' + self.url + ' reason: ' + err.message, 'invalid-json'));\n    }\n  });\n};\n/**\r\n * Decode response as text\r\n *\r\n * @return  Promise\r\n */\n\n\nBody.prototype.text = function () {\n  return this._decode().then(function (buffer) {\n    return buffer.toString();\n  });\n};\n/**\r\n * Decode response as buffer (non-spec api)\r\n *\r\n * @return  Promise\r\n */\n\n\nBody.prototype.buffer = function () {\n  return this._decode();\n};\n/**\r\n * Decode buffers into utf-8 string\r\n *\r\n * @return  Promise\r\n */\n\n\nBody.prototype._decode = function () {\n  var self = this;\n\n  if (this.bodyUsed) {\n    return Body.Promise.reject(new Error('body used already for: ' + this.url));\n  }\n\n  this.bodyUsed = true;\n  this._bytes = 0;\n  this._abort = false;\n  this._raw = [];\n  return new Body.Promise(function (resolve, reject) {\n    var resTimeout; // body is string\n\n    if (typeof self.body === 'string') {\n      self._bytes = self.body.length;\n      self._raw = [new Buffer(self.body)];\n      return resolve(self._convert());\n    } // body is buffer\n\n\n    if (self.body instanceof Buffer) {\n      self._bytes = self.body.length;\n      self._raw = [self.body];\n      return resolve(self._convert());\n    } // allow timeout on slow response body\n\n\n    if (self.timeout) {\n      resTimeout = setTimeout(function () {\n        self._abort = true;\n        reject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));\n      }, self.timeout);\n    } // handle stream error, such as incorrect content-encoding\n\n\n    self.body.on('error', function (err) {\n      reject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));\n    }); // body is stream\n\n    self.body.on('data', function (chunk) {\n      if (self._abort || chunk === null) {\n        return;\n      }\n\n      if (self.size && self._bytes + chunk.length > self.size) {\n        self._abort = true;\n        reject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));\n        return;\n      }\n\n      self._bytes += chunk.length;\n\n      self._raw.push(chunk);\n    });\n    self.body.on('end', function () {\n      if (self._abort) {\n        return;\n      }\n\n      clearTimeout(resTimeout);\n      resolve(self._convert());\n    });\n  });\n};\n/**\r\n * Detect buffer encoding and convert to target encoding\r\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\r\n *\r\n * @param   String  encoding  Target encoding\r\n * @return  String\r\n */\n\n\nBody.prototype._convert = function (encoding) {\n  encoding = encoding || 'utf-8';\n  var ct = this.headers.get('content-type');\n  var charset = 'utf-8';\n  var res, str; // header\n\n  if (ct) {\n    // skip encoding detection altogether if not html/xml/plain text\n    if (!/text\\/html|text\\/plain|\\+xml|\\/xml/i.test(ct)) {\n      return Buffer.concat(this._raw);\n    }\n\n    res = /charset=([^;]*)/i.exec(ct);\n  } // no charset in content type, peek at response body for at most 1024 bytes\n\n\n  if (!res && this._raw.length > 0) {\n    for (var i = 0; i < this._raw.length; i++) {\n      str += this._raw[i].toString();\n\n      if (str.length > 1024) {\n        break;\n      }\n    }\n\n    str = str.substr(0, 1024);\n  } // html5\n\n\n  if (!res && str) {\n    res = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n  } // html4\n\n\n  if (!res && str) {\n    res = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\n    if (res) {\n      res = /charset=(.*)/i.exec(res.pop());\n    }\n  } // xml\n\n\n  if (!res && str) {\n    res = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n  } // found charset\n\n\n  if (res) {\n    charset = res.pop(); // prevent decode issues when sites use incorrect encoding\n    // ref: https://hsivonen.fi/encoding-menu/\n\n    if (charset === 'gb2312' || charset === 'gbk') {\n      charset = 'gb18030';\n    }\n  } // turn raw buffers into a single utf-8 buffer\n\n\n  return convert(Buffer.concat(this._raw), encoding, charset);\n};\n/**\r\n * Clone body given Res/Req instance\r\n *\r\n * @param   Mixed  instance  Response or Request instance\r\n * @return  Mixed\r\n */\n\n\nBody.prototype._clone = function (instance) {\n  var p1, p2;\n  var body = instance.body; // don't allow cloning a used body\n\n  if (instance.bodyUsed) {\n    throw new Error('cannot clone body after it is used');\n  } // check that body is a stream and not form-data object\n  // note: we can't clone the form-data object without having it as a dependency\n\n\n  if (bodyStream(body) && typeof body.getBoundary !== 'function') {\n    // tee instance body\n    p1 = new PassThrough();\n    p2 = new PassThrough();\n    body.pipe(p1);\n    body.pipe(p2); // set instance body to teed body and return the other teed body\n\n    instance.body = p1;\n    body = p2;\n  }\n\n  return body;\n}; // expose Promise\n\n\nBody.Promise = global.Promise;","map":{"version":3,"sources":["C:/Users/Gowal/Documents/GitHub/SwampTrash/node_modules/node-fetch/lib/body.js"],"names":["convert","require","bodyStream","PassThrough","FetchError","module","exports","Body","body","opts","bodyUsed","size","timeout","_raw","_abort","prototype","json","self","_decode","then","buffer","JSON","parse","toString","err","Promise","reject","url","message","text","Error","_bytes","resolve","resTimeout","length","Buffer","_convert","setTimeout","on","chunk","push","clearTimeout","encoding","ct","headers","get","charset","res","str","test","concat","exec","i","substr","pop","_clone","instance","p1","p2","getBoundary","pipe","global"],"mappings":"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","sourcesContent":["\r\n/**\r\n * body.js\r\n *\r\n * Body interface provides common methods for Request and Response\r\n */\r\n\r\nvar convert = require('encoding').convert;\r\nvar bodyStream = require('is-stream');\r\nvar PassThrough = require('stream').PassThrough;\r\nvar FetchError = require('./fetch-error');\r\n\r\nmodule.exports = Body;\r\n\r\n/**\r\n * Body class\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nfunction Body(body, opts) {\r\n\r\n\topts = opts || {};\r\n\r\n\tthis.body = body;\r\n\tthis.bodyUsed = false;\r\n\tthis.size = opts.size || 0;\r\n\tthis.timeout = opts.timeout || 0;\r\n\tthis._raw = [];\r\n\tthis._abort = false;\r\n\r\n}\r\n\r\n/**\r\n * Decode response as json\r\n *\r\n * @return  Promise\r\n */\r\nBody.prototype.json = function() {\r\n\r\n\tvar self = this;\r\n\r\n\treturn this._decode().then(function(buffer) {\r\n\t\ttry {\r\n\t\t\treturn JSON.parse(buffer.toString());\r\n\t\t} catch (err) {\r\n\t\t\treturn Body.Promise.reject(new FetchError('invalid json response body at ' + self.url + ' reason: ' + err.message, 'invalid-json'));\r\n\t\t}\r\n\t});\r\n\r\n};\r\n\r\n/**\r\n * Decode response as text\r\n *\r\n * @return  Promise\r\n */\r\nBody.prototype.text = function() {\r\n\r\n\treturn this._decode().then(function(buffer) {\r\n\t\treturn buffer.toString();\r\n\t});\r\n\r\n};\r\n\r\n/**\r\n * Decode response as buffer (non-spec api)\r\n *\r\n * @return  Promise\r\n */\r\nBody.prototype.buffer = function() {\r\n\r\n\treturn this._decode();\r\n\r\n};\r\n\r\n/**\r\n * Decode buffers into utf-8 string\r\n *\r\n * @return  Promise\r\n */\r\nBody.prototype._decode = function() {\r\n\r\n\tvar self = this;\r\n\r\n\tif (this.bodyUsed) {\r\n\t\treturn Body.Promise.reject(new Error('body used already for: ' + this.url));\r\n\t}\r\n\r\n\tthis.bodyUsed = true;\r\n\tthis._bytes = 0;\r\n\tthis._abort = false;\r\n\tthis._raw = [];\r\n\r\n\treturn new Body.Promise(function(resolve, reject) {\r\n\t\tvar resTimeout;\r\n\r\n\t\t// body is string\r\n\t\tif (typeof self.body === 'string') {\r\n\t\t\tself._bytes = self.body.length;\r\n\t\t\tself._raw = [new Buffer(self.body)];\r\n\t\t\treturn resolve(self._convert());\r\n\t\t}\r\n\r\n\t\t// body is buffer\r\n\t\tif (self.body instanceof Buffer) {\r\n\t\t\tself._bytes = self.body.length;\r\n\t\t\tself._raw = [self.body];\r\n\t\t\treturn resolve(self._convert());\r\n\t\t}\r\n\r\n\t\t// allow timeout on slow response body\r\n\t\tif (self.timeout) {\r\n\t\t\tresTimeout = setTimeout(function() {\r\n\t\t\t\tself._abort = true;\r\n\t\t\t\treject(new FetchError('response timeout at ' + self.url + ' over limit: ' + self.timeout, 'body-timeout'));\r\n\t\t\t}, self.timeout);\r\n\t\t}\r\n\r\n\t\t// handle stream error, such as incorrect content-encoding\r\n\t\tself.body.on('error', function(err) {\r\n\t\t\treject(new FetchError('invalid response body at: ' + self.url + ' reason: ' + err.message, 'system', err));\r\n\t\t});\r\n\r\n\t\t// body is stream\r\n\t\tself.body.on('data', function(chunk) {\r\n\t\t\tif (self._abort || chunk === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (self.size && self._bytes + chunk.length > self.size) {\r\n\t\t\t\tself._abort = true;\r\n\t\t\t\treject(new FetchError('content size at ' + self.url + ' over limit: ' + self.size, 'max-size'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tself._bytes += chunk.length;\r\n\t\t\tself._raw.push(chunk);\r\n\t\t});\r\n\r\n\t\tself.body.on('end', function() {\r\n\t\t\tif (self._abort) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tclearTimeout(resTimeout);\r\n\t\t\tresolve(self._convert());\r\n\t\t});\r\n\t});\r\n\r\n};\r\n\r\n/**\r\n * Detect buffer encoding and convert to target encoding\r\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\r\n *\r\n * @param   String  encoding  Target encoding\r\n * @return  String\r\n */\r\nBody.prototype._convert = function(encoding) {\r\n\r\n\tencoding = encoding || 'utf-8';\r\n\r\n\tvar ct = this.headers.get('content-type');\r\n\tvar charset = 'utf-8';\r\n\tvar res, str;\r\n\r\n\t// header\r\n\tif (ct) {\r\n\t\t// skip encoding detection altogether if not html/xml/plain text\r\n\t\tif (!/text\\/html|text\\/plain|\\+xml|\\/xml/i.test(ct)) {\r\n\t\t\treturn Buffer.concat(this._raw);\r\n\t\t}\r\n\r\n\t\tres = /charset=([^;]*)/i.exec(ct);\r\n\t}\r\n\r\n\t// no charset in content type, peek at response body for at most 1024 bytes\r\n\tif (!res && this._raw.length > 0) {\r\n\t\tfor (var i = 0; i < this._raw.length; i++) {\r\n\t\t\tstr += this._raw[i].toString()\r\n\t\t\tif (str.length > 1024) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tstr = str.substr(0, 1024);\r\n\t}\r\n\r\n\t// html5\r\n\tif (!res && str) {\r\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// html4\r\n\tif (!res && str) {\r\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\r\n\r\n\t\tif (res) {\r\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\r\n\t\t}\r\n\t}\r\n\r\n\t// xml\r\n\tif (!res && str) {\r\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// found charset\r\n\tif (res) {\r\n\t\tcharset = res.pop();\r\n\r\n\t\t// prevent decode issues when sites use incorrect encoding\r\n\t\t// ref: https://hsivonen.fi/encoding-menu/\r\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\r\n\t\t\tcharset = 'gb18030';\r\n\t\t}\r\n\t}\r\n\r\n\t// turn raw buffers into a single utf-8 buffer\r\n\treturn convert(\r\n\t\tBuffer.concat(this._raw)\r\n\t\t, encoding\r\n\t\t, charset\r\n\t);\r\n\r\n};\r\n\r\n/**\r\n * Clone body given Res/Req instance\r\n *\r\n * @param   Mixed  instance  Response or Request instance\r\n * @return  Mixed\r\n */\r\nBody.prototype._clone = function(instance) {\r\n\tvar p1, p2;\r\n\tvar body = instance.body;\r\n\r\n\t// don't allow cloning a used body\r\n\tif (instance.bodyUsed) {\r\n\t\tthrow new Error('cannot clone body after it is used');\r\n\t}\r\n\r\n\t// check that body is a stream and not form-data object\r\n\t// note: we can't clone the form-data object without having it as a dependency\r\n\tif (bodyStream(body) && typeof body.getBoundary !== 'function') {\r\n\t\t// tee instance body\r\n\t\tp1 = new PassThrough();\r\n\t\tp2 = new PassThrough();\r\n\t\tbody.pipe(p1);\r\n\t\tbody.pipe(p2);\r\n\t\t// set instance body to teed body and return the other teed body\r\n\t\tinstance.body = p1;\r\n\t\tbody = p2;\r\n\t}\r\n\r\n\treturn body;\r\n}\r\n\r\n// expose Promise\r\nBody.Promise = global.Promise;\r\n"]},"metadata":{},"sourceType":"script"}