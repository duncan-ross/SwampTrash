{"ast":null,"code":"'use strict';\n\nvar iconvLite = require('iconv-lite'); // Load Iconv from an external file to be able to disable Iconv for webpack\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\n\n\nvar Iconv = require('./iconv-loader'); // Expose to the world\n\n\nmodule.exports.convert = convert;\n/**\r\n * Convert encoding of an UTF-8 string or a buffer\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @param {Boolean} useLite If set to ture, force to use iconvLite\r\n * @return {Buffer} Encoded string\r\n */\n\nfunction convert(str, to, from, useLite) {\n  from = checkEncoding(from || 'UTF-8');\n  to = checkEncoding(to || 'UTF-8');\n  str = str || '';\n  var result;\n\n  if (from !== 'UTF-8' && typeof str === 'string') {\n    str = new Buffer(str, 'binary');\n  }\n\n  if (from === to) {\n    if (typeof str === 'string') {\n      result = new Buffer(str);\n    } else {\n      result = str;\n    }\n  } else if (Iconv && !useLite) {\n    try {\n      result = convertIconv(str, to, from);\n    } catch (E) {\n      console.error(E);\n\n      try {\n        result = convertIconvLite(str, to, from);\n      } catch (E) {\n        console.error(E);\n        result = str;\n      }\n    }\n  } else {\n    try {\n      result = convertIconvLite(str, to, from);\n    } catch (E) {\n      console.error(E);\n      result = str;\n    }\n  }\n\n  if (typeof result === 'string') {\n    result = new Buffer(result, 'utf-8');\n  }\n\n  return result;\n}\n/**\r\n * Convert encoding of a string with node-iconv (if available)\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @return {Buffer} Encoded string\r\n */\n\n\nfunction convertIconv(str, to, from) {\n  var response, iconv;\n  iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\n  response = iconv.convert(str);\n  return response.slice(0, response.length);\n}\n/**\r\n * Convert encoding of astring with iconv-lite\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @return {Buffer} Encoded string\r\n */\n\n\nfunction convertIconvLite(str, to, from) {\n  if (to === 'UTF-8') {\n    return iconvLite.decode(str, from);\n  } else if (from === 'UTF-8') {\n    return iconvLite.encode(str, to);\n  } else {\n    return iconvLite.encode(iconvLite.decode(str, from), to);\n  }\n}\n/**\r\n * Converts charset name if needed\r\n *\r\n * @param {String} name Character set\r\n * @return {String} Character set name\r\n */\n\n\nfunction checkEncoding(name) {\n  return (name || '').toString().trim().replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\\-1987$/i, 'CP949').replace(/^us[\\-_]?ascii$/i, 'ASCII').toUpperCase();\n}","map":{"version":3,"sources":["C:/Users/Gowal/Documents/GitHub/SwampTrash/node_modules/encoding/lib/encoding.js"],"names":["iconvLite","require","Iconv","module","exports","convert","str","to","from","useLite","checkEncoding","result","Buffer","convertIconv","E","console","error","convertIconvLite","response","iconv","slice","length","decode","encode","name","toString","trim","replace","toUpperCase"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB,C,CACA;AACA;;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;;;AACAE,MAAM,CAACC,OAAP,CAAeC,OAAf,GAAyBA,OAAzB;AAEA;;;;;;;;;;AASA,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,EAAtB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AACrCD,EAAAA,IAAI,GAAGE,aAAa,CAACF,IAAI,IAAI,OAAT,CAApB;AACAD,EAAAA,EAAE,GAAGG,aAAa,CAACH,EAAE,IAAI,OAAP,CAAlB;AACAD,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AAEA,MAAIK,MAAJ;;AAEA,MAAIH,IAAI,KAAK,OAAT,IAAoB,OAAOF,GAAP,KAAe,QAAvC,EAAiD;AAC7CA,IAAAA,GAAG,GAAG,IAAIM,MAAJ,CAAWN,GAAX,EAAgB,QAAhB,CAAN;AACH;;AAED,MAAIE,IAAI,KAAKD,EAAb,EAAiB;AACb,QAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AACzBK,MAAAA,MAAM,GAAG,IAAIC,MAAJ,CAAWN,GAAX,CAAT;AACH,KAFD,MAEO;AACHK,MAAAA,MAAM,GAAGL,GAAT;AACH;AACJ,GAND,MAMO,IAAIJ,KAAK,IAAI,CAACO,OAAd,EAAuB;AAC1B,QAAI;AACAE,MAAAA,MAAM,GAAGE,YAAY,CAACP,GAAD,EAAMC,EAAN,EAAUC,IAAV,CAArB;AACH,KAFD,CAEE,OAAOM,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;;AACA,UAAI;AACAH,QAAAA,MAAM,GAAGM,gBAAgB,CAACX,GAAD,EAAMC,EAAN,EAAUC,IAAV,CAAzB;AACH,OAFD,CAEE,OAAOM,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAH,QAAAA,MAAM,GAAGL,GAAT;AACH;AACJ;AACJ,GAZM,MAYA;AACH,QAAI;AACAK,MAAAA,MAAM,GAAGM,gBAAgB,CAACX,GAAD,EAAMC,EAAN,EAAUC,IAAV,CAAzB;AACH,KAFD,CAEE,OAAOM,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACAH,MAAAA,MAAM,GAAGL,GAAT;AACH;AACJ;;AAGD,MAAI,OAAOK,MAAP,KAAkB,QAAtB,EAAgC;AAC5BA,IAAAA,MAAM,GAAG,IAAIC,MAAJ,CAAWD,MAAX,EAAmB,OAAnB,CAAT;AACH;;AAED,SAAOA,MAAP;AACH;AAED;;;;;;;;;;AAQA,SAASE,YAAT,CAAsBP,GAAtB,EAA2BC,EAA3B,EAA+BC,IAA/B,EAAqC;AACjC,MAAIU,QAAJ,EAAcC,KAAd;AACAA,EAAAA,KAAK,GAAG,IAAIjB,KAAJ,CAAUM,IAAV,EAAgBD,EAAE,GAAG,oBAArB,CAAR;AACAW,EAAAA,QAAQ,GAAGC,KAAK,CAACd,OAAN,CAAcC,GAAd,CAAX;AACA,SAAOY,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkBF,QAAQ,CAACG,MAA3B,CAAP;AACH;AAED;;;;;;;;;;AAQA,SAASJ,gBAAT,CAA0BX,GAA1B,EAA+BC,EAA/B,EAAmCC,IAAnC,EAAyC;AACrC,MAAID,EAAE,KAAK,OAAX,EAAoB;AAChB,WAAOP,SAAS,CAACsB,MAAV,CAAiBhB,GAAjB,EAAsBE,IAAtB,CAAP;AACH,GAFD,MAEO,IAAIA,IAAI,KAAK,OAAb,EAAsB;AACzB,WAAOR,SAAS,CAACuB,MAAV,CAAiBjB,GAAjB,EAAsBC,EAAtB,CAAP;AACH,GAFM,MAEA;AACH,WAAOP,SAAS,CAACuB,MAAV,CAAiBvB,SAAS,CAACsB,MAAV,CAAiBhB,GAAjB,EAAsBE,IAAtB,CAAjB,EAA8CD,EAA9C,CAAP;AACH;AACJ;AAED;;;;;;;;AAMA,SAASG,aAAT,CAAuBc,IAAvB,EAA6B;AACzB,SAAO,CAACA,IAAI,IAAI,EAAT,EAAaC,QAAb,GAAwBC,IAAxB,GACPC,OADO,CACC,qBADD,EACwB,aADxB,EAEPA,OAFO,CAEC,4BAFD,EAE+B,YAF/B,EAGPA,OAHO,CAGC,mBAHD,EAGsB,QAHtB,EAIPA,OAJO,CAIC,oBAJD,EAIuB,OAJvB,EAKPA,OALO,CAKC,kBALD,EAKqB,OALrB,EAMPC,WANO,EAAP;AAOH","sourcesContent":["'use strict';\r\n\r\nvar iconvLite = require('iconv-lite');\r\n// Load Iconv from an external file to be able to disable Iconv for webpack\r\n// Add /\\/iconv-loader$/ to webpack.IgnorePlugin to ignore it\r\nvar Iconv = require('./iconv-loader');\r\n\r\n// Expose to the world\r\nmodule.exports.convert = convert;\r\n\r\n/**\r\n * Convert encoding of an UTF-8 string or a buffer\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @param {Boolean} useLite If set to ture, force to use iconvLite\r\n * @return {Buffer} Encoded string\r\n */\r\nfunction convert(str, to, from, useLite) {\r\n    from = checkEncoding(from || 'UTF-8');\r\n    to = checkEncoding(to || 'UTF-8');\r\n    str = str || '';\r\n\r\n    var result;\r\n\r\n    if (from !== 'UTF-8' && typeof str === 'string') {\r\n        str = new Buffer(str, 'binary');\r\n    }\r\n\r\n    if (from === to) {\r\n        if (typeof str === 'string') {\r\n            result = new Buffer(str);\r\n        } else {\r\n            result = str;\r\n        }\r\n    } else if (Iconv && !useLite) {\r\n        try {\r\n            result = convertIconv(str, to, from);\r\n        } catch (E) {\r\n            console.error(E);\r\n            try {\r\n                result = convertIconvLite(str, to, from);\r\n            } catch (E) {\r\n                console.error(E);\r\n                result = str;\r\n            }\r\n        }\r\n    } else {\r\n        try {\r\n            result = convertIconvLite(str, to, from);\r\n        } catch (E) {\r\n            console.error(E);\r\n            result = str;\r\n        }\r\n    }\r\n\r\n\r\n    if (typeof result === 'string') {\r\n        result = new Buffer(result, 'utf-8');\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Convert encoding of a string with node-iconv (if available)\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @return {Buffer} Encoded string\r\n */\r\nfunction convertIconv(str, to, from) {\r\n    var response, iconv;\r\n    iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');\r\n    response = iconv.convert(str);\r\n    return response.slice(0, response.length);\r\n}\r\n\r\n/**\r\n * Convert encoding of astring with iconv-lite\r\n *\r\n * @param {String|Buffer} str String to be converted\r\n * @param {String} to Encoding to be converted to\r\n * @param {String} [from='UTF-8'] Encoding to be converted from\r\n * @return {Buffer} Encoded string\r\n */\r\nfunction convertIconvLite(str, to, from) {\r\n    if (to === 'UTF-8') {\r\n        return iconvLite.decode(str, from);\r\n    } else if (from === 'UTF-8') {\r\n        return iconvLite.encode(str, to);\r\n    } else {\r\n        return iconvLite.encode(iconvLite.decode(str, from), to);\r\n    }\r\n}\r\n\r\n/**\r\n * Converts charset name if needed\r\n *\r\n * @param {String} name Character set\r\n * @return {String} Character set name\r\n */\r\nfunction checkEncoding(name) {\r\n    return (name || '').toString().trim().\r\n    replace(/^latin[\\-_]?(\\d+)$/i, 'ISO-8859-$1').\r\n    replace(/^win(?:dows)?[\\-_]?(\\d+)$/i, 'WINDOWS-$1').\r\n    replace(/^utf[\\-_]?(\\d+)$/i, 'UTF-$1').\r\n    replace(/^ks_c_5601\\-1987$/i, 'CP949').\r\n    replace(/^us[\\-_]?ascii$/i, 'ASCII').\r\n    toUpperCase();\r\n}\r\n"]},"metadata":{},"sourceType":"script"}