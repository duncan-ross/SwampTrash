{"ast":null,"code":"/**\r\n * index.js\r\n *\r\n * a request API compatible with window.fetch\r\n */\nvar parse_url = require('url').parse;\n\nvar resolve_url = require('url').resolve;\n\nvar http = require('http');\n\nvar https = require('https');\n\nvar zlib = require('zlib');\n\nvar stream = require('stream');\n\nvar Body = require('./lib/body');\n\nvar Response = require('./lib/response');\n\nvar Headers = require('./lib/headers');\n\nvar Request = require('./lib/request');\n\nvar FetchError = require('./lib/fetch-error'); // commonjs\n\n\nmodule.exports = Fetch; // es6 default export compatibility\n\nmodule.exports.default = module.exports;\n/**\r\n * Fetch class\r\n *\r\n * @param   Mixed    url   Absolute url or Request instance\r\n * @param   Object   opts  Fetch options\r\n * @return  Promise\r\n */\n\nfunction Fetch(url, opts) {\n  // allow call as function\n  if (!(this instanceof Fetch)) return new Fetch(url, opts); // allow custom promise\n\n  if (!Fetch.Promise) {\n    throw new Error('native promise missing, set Fetch.Promise to your favorite alternative');\n  }\n\n  Body.Promise = Fetch.Promise;\n  var self = this; // wrap http.request into fetch\n\n  return new Fetch.Promise(function (resolve, reject) {\n    // build request object\n    var options = new Request(url, opts);\n\n    if (!options.protocol || !options.hostname) {\n      throw new Error('only absolute urls are supported');\n    }\n\n    if (options.protocol !== 'http:' && options.protocol !== 'https:') {\n      throw new Error('only http(s) protocols are supported');\n    }\n\n    var send;\n\n    if (options.protocol === 'https:') {\n      send = https.request;\n    } else {\n      send = http.request;\n    } // normalize headers\n\n\n    var headers = new Headers(options.headers);\n\n    if (options.compress) {\n      headers.set('accept-encoding', 'gzip,deflate');\n    }\n\n    if (!headers.has('user-agent')) {\n      headers.set('user-agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n    }\n\n    if (!headers.has('connection') && !options.agent) {\n      headers.set('connection', 'close');\n    }\n\n    if (!headers.has('accept')) {\n      headers.set('accept', '*/*');\n    } // detect form data input from form-data module, this hack avoid the need to pass multipart header manually\n\n\n    if (!headers.has('content-type') && options.body && typeof options.body.getBoundary === 'function') {\n      headers.set('content-type', 'multipart/form-data; boundary=' + options.body.getBoundary());\n    } // bring node-fetch closer to browser behavior by setting content-length automatically\n\n\n    if (!headers.has('content-length') && /post|put|patch|delete/i.test(options.method)) {\n      if (typeof options.body === 'string') {\n        headers.set('content-length', Buffer.byteLength(options.body)); // detect form data input from form-data module, this hack avoid the need to add content-length header manually\n      } else if (options.body && typeof options.body.getLengthSync === 'function') {\n        // for form-data 1.x\n        if (options.body._lengthRetrievers && options.body._lengthRetrievers.length == 0) {\n          headers.set('content-length', options.body.getLengthSync().toString()); // for form-data 2.x\n        } else if (options.body.hasKnownLength && options.body.hasKnownLength()) {\n          headers.set('content-length', options.body.getLengthSync().toString());\n        } // this is only necessary for older nodejs releases (before iojs merge)\n\n      } else if (options.body === undefined || options.body === null) {\n        headers.set('content-length', '0');\n      }\n    }\n\n    options.headers = headers.raw(); // http.request only support string as host header, this hack make custom host header possible\n\n    if (options.headers.host) {\n      options.headers.host = options.headers.host[0];\n    } // send request\n\n\n    var req = send(options);\n    var reqTimeout;\n\n    if (options.timeout) {\n      req.once('socket', function (socket) {\n        reqTimeout = setTimeout(function () {\n          req.abort();\n          reject(new FetchError('network timeout at: ' + options.url, 'request-timeout'));\n        }, options.timeout);\n      });\n    }\n\n    req.on('error', function (err) {\n      clearTimeout(reqTimeout);\n      reject(new FetchError('request to ' + options.url + ' failed, reason: ' + err.message, 'system', err));\n    });\n    req.on('response', function (res) {\n      clearTimeout(reqTimeout); // handle redirect\n\n      if (self.isRedirect(res.statusCode) && options.redirect !== 'manual') {\n        if (options.redirect === 'error') {\n          reject(new FetchError('redirect mode is set to error: ' + options.url, 'no-redirect'));\n          return;\n        }\n\n        if (options.counter >= options.follow) {\n          reject(new FetchError('maximum redirect reached at: ' + options.url, 'max-redirect'));\n          return;\n        }\n\n        if (!res.headers.location) {\n          reject(new FetchError('redirect location header missing at: ' + options.url, 'invalid-redirect'));\n          return;\n        } // per fetch spec, for POST request with 301/302 response, or any request with 303 response, use GET when following redirect\n\n\n        if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && options.method === 'POST') {\n          options.method = 'GET';\n          delete options.body;\n          delete options.headers['content-length'];\n        }\n\n        options.counter++;\n        resolve(Fetch(resolve_url(options.url, res.headers.location), options));\n        return;\n      } // normalize location header for manual redirect mode\n\n\n      var headers = new Headers(res.headers);\n\n      if (options.redirect === 'manual' && headers.has('location')) {\n        headers.set('location', resolve_url(options.url, headers.get('location')));\n      } // prepare response\n\n\n      var body = res.pipe(new stream.PassThrough());\n      var response_options = {\n        url: options.url,\n        status: res.statusCode,\n        statusText: res.statusMessage,\n        headers: headers,\n        size: options.size,\n        timeout: options.timeout\n      }; // response object\n\n      var output; // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no content-encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n\n      if (!options.compress || options.method === 'HEAD' || !headers.has('content-encoding') || res.statusCode === 204 || res.statusCode === 304) {\n        output = new Response(body, response_options);\n        resolve(output);\n        return;\n      } // otherwise, check for gzip or deflate\n\n\n      var name = headers.get('content-encoding'); // for gzip\n\n      if (name == 'gzip' || name == 'x-gzip') {\n        body = body.pipe(zlib.createGunzip());\n        output = new Response(body, response_options);\n        resolve(output);\n        return; // for deflate\n      } else if (name == 'deflate' || name == 'x-deflate') {\n        // handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        var raw = res.pipe(new stream.PassThrough());\n        raw.once('data', function (chunk) {\n          // see http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = body.pipe(zlib.createInflate());\n          } else {\n            body = body.pipe(zlib.createInflateRaw());\n          }\n\n          output = new Response(body, response_options);\n          resolve(output);\n        });\n        return;\n      } // otherwise, use response as-is\n\n\n      output = new Response(body, response_options);\n      resolve(output);\n      return;\n    }); // accept string, buffer or readable stream as body\n    // per spec we will call tostring on non-stream objects\n\n    if (typeof options.body === 'string') {\n      req.write(options.body);\n      req.end();\n    } else if (options.body instanceof Buffer) {\n      req.write(options.body);\n      req.end();\n    } else if (typeof options.body === 'object' && options.body.pipe) {\n      options.body.pipe(req);\n    } else if (typeof options.body === 'object') {\n      req.write(options.body.toString());\n      req.end();\n    } else {\n      req.end();\n    }\n  });\n}\n\n;\n/**\r\n * Redirect code matching\r\n *\r\n * @param   Number   code  Status code\r\n * @return  Boolean\r\n */\n\nFetch.prototype.isRedirect = function (code) {\n  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n}; // expose Promise\n\n\nFetch.Promise = global.Promise;\nFetch.Response = Response;\nFetch.Headers = Headers;\nFetch.Request = Request;","map":{"version":3,"sources":["C:/Users/Gowal/Documents/GitHub/SwampTrash/node_modules/node-fetch/index.js"],"names":["parse_url","require","parse","resolve_url","resolve","http","https","zlib","stream","Body","Response","Headers","Request","FetchError","module","exports","Fetch","default","url","opts","Promise","Error","self","reject","options","protocol","hostname","send","request","headers","compress","set","has","agent","body","getBoundary","test","method","Buffer","byteLength","getLengthSync","_lengthRetrievers","length","toString","hasKnownLength","undefined","raw","host","req","reqTimeout","timeout","once","socket","setTimeout","abort","on","err","clearTimeout","message","res","isRedirect","statusCode","redirect","counter","follow","location","get","pipe","PassThrough","response_options","status","statusText","statusMessage","size","output","name","createGunzip","chunk","createInflate","createInflateRaw","write","end","prototype","code","global"],"mappings":"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","sourcesContent":["\r\n/**\r\n * index.js\r\n *\r\n * a request API compatible with window.fetch\r\n */\r\n\r\nvar parse_url = require('url').parse;\r\nvar resolve_url = require('url').resolve;\r\nvar http = require('http');\r\nvar https = require('https');\r\nvar zlib = require('zlib');\r\nvar stream = require('stream');\r\n\r\nvar Body = require('./lib/body');\r\nvar Response = require('./lib/response');\r\nvar Headers = require('./lib/headers');\r\nvar Request = require('./lib/request');\r\nvar FetchError = require('./lib/fetch-error');\r\n\r\n// commonjs\r\nmodule.exports = Fetch;\r\n// es6 default export compatibility\r\nmodule.exports.default = module.exports;\r\n\r\n/**\r\n * Fetch class\r\n *\r\n * @param   Mixed    url   Absolute url or Request instance\r\n * @param   Object   opts  Fetch options\r\n * @return  Promise\r\n */\r\nfunction Fetch(url, opts) {\r\n\r\n\t// allow call as function\r\n\tif (!(this instanceof Fetch))\r\n\t\treturn new Fetch(url, opts);\r\n\r\n\t// allow custom promise\r\n\tif (!Fetch.Promise) {\r\n\t\tthrow new Error('native promise missing, set Fetch.Promise to your favorite alternative');\r\n\t}\r\n\r\n\tBody.Promise = Fetch.Promise;\r\n\r\n\tvar self = this;\r\n\r\n\t// wrap http.request into fetch\r\n\treturn new Fetch.Promise(function(resolve, reject) {\r\n\t\t// build request object\r\n\t\tvar options = new Request(url, opts);\r\n\r\n\t\tif (!options.protocol || !options.hostname) {\r\n\t\t\tthrow new Error('only absolute urls are supported');\r\n\t\t}\r\n\r\n\t\tif (options.protocol !== 'http:' && options.protocol !== 'https:') {\r\n\t\t\tthrow new Error('only http(s) protocols are supported');\r\n\t\t}\r\n\r\n\t\tvar send;\r\n\t\tif (options.protocol === 'https:') {\r\n\t\t\tsend = https.request;\r\n\t\t} else {\r\n\t\t\tsend = http.request;\r\n\t\t}\r\n\r\n\t\t// normalize headers\r\n\t\tvar headers = new Headers(options.headers);\r\n\r\n\t\tif (options.compress) {\r\n\t\t\theaders.set('accept-encoding', 'gzip,deflate');\r\n\t\t}\r\n\r\n\t\tif (!headers.has('user-agent')) {\r\n\t\t\theaders.set('user-agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\r\n\t\t}\r\n\r\n\t\tif (!headers.has('connection') && !options.agent) {\r\n\t\t\theaders.set('connection', 'close');\r\n\t\t}\r\n\r\n\t\tif (!headers.has('accept')) {\r\n\t\t\theaders.set('accept', '*/*');\r\n\t\t}\r\n\r\n\t\t// detect form data input from form-data module, this hack avoid the need to pass multipart header manually\r\n\t\tif (!headers.has('content-type') && options.body && typeof options.body.getBoundary === 'function') {\r\n\t\t\theaders.set('content-type', 'multipart/form-data; boundary=' + options.body.getBoundary());\r\n\t\t}\r\n\r\n\t\t// bring node-fetch closer to browser behavior by setting content-length automatically\r\n\t\tif (!headers.has('content-length') && /post|put|patch|delete/i.test(options.method)) {\r\n\t\t\tif (typeof options.body === 'string') {\r\n\t\t\t\theaders.set('content-length', Buffer.byteLength(options.body));\r\n\t\t\t// detect form data input from form-data module, this hack avoid the need to add content-length header manually\r\n\t\t\t} else if (options.body && typeof options.body.getLengthSync === 'function') {\r\n\t\t\t\t// for form-data 1.x\r\n\t\t\t\tif (options.body._lengthRetrievers && options.body._lengthRetrievers.length == 0) {\r\n\t\t\t\t\theaders.set('content-length', options.body.getLengthSync().toString());\r\n\t\t\t\t// for form-data 2.x\r\n\t\t\t\t} else if (options.body.hasKnownLength && options.body.hasKnownLength()) {\r\n\t\t\t\t\theaders.set('content-length', options.body.getLengthSync().toString());\r\n\t\t\t\t}\r\n\t\t\t// this is only necessary for older nodejs releases (before iojs merge)\r\n\t\t\t} else if (options.body === undefined || options.body === null) {\r\n\t\t\t\theaders.set('content-length', '0');\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toptions.headers = headers.raw();\r\n\r\n\t\t// http.request only support string as host header, this hack make custom host header possible\r\n\t\tif (options.headers.host) {\r\n\t\t\toptions.headers.host = options.headers.host[0];\r\n\t\t}\r\n\r\n\t\t// send request\r\n\t\tvar req = send(options);\r\n\t\tvar reqTimeout;\r\n\r\n\t\tif (options.timeout) {\r\n\t\t\treq.once('socket', function(socket) {\r\n\t\t\t\treqTimeout = setTimeout(function() {\r\n\t\t\t\t\treq.abort();\r\n\t\t\t\t\treject(new FetchError('network timeout at: ' + options.url, 'request-timeout'));\r\n\t\t\t\t}, options.timeout);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treq.on('error', function(err) {\r\n\t\t\tclearTimeout(reqTimeout);\r\n\t\t\treject(new FetchError('request to ' + options.url + ' failed, reason: ' + err.message, 'system', err));\r\n\t\t});\r\n\r\n\t\treq.on('response', function(res) {\r\n\t\t\tclearTimeout(reqTimeout);\r\n\r\n\t\t\t// handle redirect\r\n\t\t\tif (self.isRedirect(res.statusCode) && options.redirect !== 'manual') {\r\n\t\t\t\tif (options.redirect === 'error') {\r\n\t\t\t\t\treject(new FetchError('redirect mode is set to error: ' + options.url, 'no-redirect'));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (options.counter >= options.follow) {\r\n\t\t\t\t\treject(new FetchError('maximum redirect reached at: ' + options.url, 'max-redirect'));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!res.headers.location) {\r\n\t\t\t\t\treject(new FetchError('redirect location header missing at: ' + options.url, 'invalid-redirect'));\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// per fetch spec, for POST request with 301/302 response, or any request with 303 response, use GET when following redirect\r\n\t\t\t\tif (res.statusCode === 303\r\n\t\t\t\t\t|| ((res.statusCode === 301 || res.statusCode === 302) && options.method === 'POST'))\r\n\t\t\t\t{\r\n\t\t\t\t\toptions.method = 'GET';\r\n\t\t\t\t\tdelete options.body;\r\n\t\t\t\t\tdelete options.headers['content-length'];\r\n\t\t\t\t}\r\n\r\n\t\t\t\toptions.counter++;\r\n\r\n\t\t\t\tresolve(Fetch(resolve_url(options.url, res.headers.location), options));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// normalize location header for manual redirect mode\r\n\t\t\tvar headers = new Headers(res.headers);\r\n\t\t\tif (options.redirect === 'manual' && headers.has('location')) {\r\n\t\t\t\theaders.set('location', resolve_url(options.url, headers.get('location')));\r\n\t\t\t}\r\n\r\n\t\t\t// prepare response\r\n\t\t\tvar body = res.pipe(new stream.PassThrough());\r\n\t\t\tvar response_options = {\r\n\t\t\t\turl: options.url\r\n\t\t\t\t, status: res.statusCode\r\n\t\t\t\t, statusText: res.statusMessage\r\n\t\t\t\t, headers: headers\r\n\t\t\t\t, size: options.size\r\n\t\t\t\t, timeout: options.timeout\r\n\t\t\t};\r\n\r\n\t\t\t// response object\r\n\t\t\tvar output;\r\n\r\n\t\t\t// in following scenarios we ignore compression support\r\n\t\t\t// 1. compression support is disabled\r\n\t\t\t// 2. HEAD request\r\n\t\t\t// 3. no content-encoding header\r\n\t\t\t// 4. no content response (204)\r\n\t\t\t// 5. content not modified response (304)\r\n\t\t\tif (!options.compress || options.method === 'HEAD' || !headers.has('content-encoding') || res.statusCode === 204 || res.statusCode === 304) {\r\n\t\t\t\toutput = new Response(body, response_options);\r\n\t\t\t\tresolve(output);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise, check for gzip or deflate\r\n\t\t\tvar name = headers.get('content-encoding');\r\n\r\n\t\t\t// for gzip\r\n\t\t\tif (name == 'gzip' || name == 'x-gzip') {\r\n\t\t\t\tbody = body.pipe(zlib.createGunzip());\r\n\t\t\t\toutput = new Response(body, response_options);\r\n\t\t\t\tresolve(output);\r\n\t\t\t\treturn;\r\n\r\n\t\t\t// for deflate\r\n\t\t\t} else if (name == 'deflate' || name == 'x-deflate') {\r\n\t\t\t\t// handle the infamous raw deflate response from old servers\r\n\t\t\t\t// a hack for old IIS and Apache servers\r\n\t\t\t\tvar raw = res.pipe(new stream.PassThrough());\r\n\t\t\t\traw.once('data', function(chunk) {\r\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\r\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\r\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\r\n\t\t\t\t\t}\r\n\t\t\t\t\toutput = new Response(body, response_options);\r\n\t\t\t\t\tresolve(output);\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise, use response as-is\r\n\t\t\toutput = new Response(body, response_options);\r\n\t\t\tresolve(output);\r\n\t\t\treturn;\r\n\t\t});\r\n\r\n\t\t// accept string, buffer or readable stream as body\r\n\t\t// per spec we will call tostring on non-stream objects\r\n\t\tif (typeof options.body === 'string') {\r\n\t\t\treq.write(options.body);\r\n\t\t\treq.end();\r\n\t\t} else if (options.body instanceof Buffer) {\r\n\t\t\treq.write(options.body);\r\n\t\t\treq.end();\r\n\t\t} else if (typeof options.body === 'object' && options.body.pipe) {\r\n\t\t\toptions.body.pipe(req);\r\n\t\t} else if (typeof options.body === 'object') {\r\n\t\t\treq.write(options.body.toString());\r\n\t\t\treq.end();\r\n\t\t} else {\r\n\t\t\treq.end();\r\n\t\t}\r\n\t});\r\n\r\n};\r\n\r\n/**\r\n * Redirect code matching\r\n *\r\n * @param   Number   code  Status code\r\n * @return  Boolean\r\n */\r\nFetch.prototype.isRedirect = function(code) {\r\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\r\n}\r\n\r\n// expose Promise\r\nFetch.Promise = global.Promise;\r\nFetch.Response = Response;\r\nFetch.Headers = Headers;\r\nFetch.Request = Request;\r\n"]},"metadata":{},"sourceType":"script"}