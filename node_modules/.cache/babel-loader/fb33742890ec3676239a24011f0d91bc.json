{"ast":null,"code":"/** @license React v16.6.1\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /* eslint-disable no-var */\n    // TODO: Use symbols?\n\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var IdlePriority = 4; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.\n\n    var firstCallbackNode = null;\n    var currentDidTimeout = false;\n    var currentPriorityLevel = NormalPriority;\n    var currentEventStartTime = -1;\n    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.\n\n    var isExecutingCallback = false;\n    var isHostCallbackScheduled = false;\n    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\n    function ensureHostCallbackIsScheduled() {\n      if (isExecutingCallback) {\n        // Don't schedule work yet; wait until the next time we yield.\n        return;\n      } // Schedule the host callback using the earliest expiration in the list.\n\n\n      var expirationTime = firstCallbackNode.expirationTime;\n\n      if (!isHostCallbackScheduled) {\n        isHostCallbackScheduled = true;\n      } else {\n        // Cancel the existing host callback.\n        cancelHostCallback();\n      }\n\n      _requestHostCallback(flushWork, expirationTime);\n    }\n\n    function flushFirstCallback() {\n      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n\n      var next = firstCallbackNode.next;\n\n      if (firstCallbackNode === next) {\n        // This is the last callback in the list.\n        firstCallbackNode = null;\n        next = null;\n      } else {\n        var lastCallbackNode = firstCallbackNode.previous;\n        firstCallbackNode = lastCallbackNode.next = next;\n        next.previous = lastCallbackNode;\n      }\n\n      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.\n\n      var callback = flushedNode.callback;\n      var expirationTime = flushedNode.expirationTime;\n      var priorityLevel = flushedNode.priorityLevel;\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousExpirationTime = currentExpirationTime;\n      currentPriorityLevel = priorityLevel;\n      currentExpirationTime = expirationTime;\n      var continuationCallback;\n\n      try {\n        continuationCallback = callback();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentExpirationTime = previousExpirationTime;\n      } // A callback may return a continuation. The continuation should be scheduled\n      // with the same priority and expiration as the just-finished callback.\n\n\n      if (typeof continuationCallback === 'function') {\n        var continuationNode = {\n          callback: continuationCallback,\n          priorityLevel: priorityLevel,\n          expirationTime: expirationTime,\n          next: null,\n          previous: null\n        }; // Insert the new callback into the list, sorted by its expiration. This is\n        // almost the same as the code in `scheduleCallback`, except the callback\n        // is inserted into the list *before* callbacks of equal expiration instead\n        // of after.\n\n        if (firstCallbackNode === null) {\n          // This is the first callback in the list.\n          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\n        } else {\n          var nextAfterContinuation = null;\n          var node = firstCallbackNode;\n\n          do {\n            if (node.expirationTime >= expirationTime) {\n              // This callback expires at or after the continuation. We will insert\n              // the continuation *before* this callback.\n              nextAfterContinuation = node;\n              break;\n            }\n\n            node = node.next;\n          } while (node !== firstCallbackNode);\n\n          if (nextAfterContinuation === null) {\n            // No equal or lower priority callback was found, which means the new\n            // callback is the lowest priority callback in the list.\n            nextAfterContinuation = firstCallbackNode;\n          } else if (nextAfterContinuation === firstCallbackNode) {\n            // The new callback is the highest priority callback in the list.\n            firstCallbackNode = continuationNode;\n            ensureHostCallbackIsScheduled();\n          }\n\n          var previous = nextAfterContinuation.previous;\n          previous.next = nextAfterContinuation.previous = continuationNode;\n          continuationNode.next = nextAfterContinuation;\n          continuationNode.previous = previous;\n        }\n      }\n    }\n\n    function flushImmediateWork() {\n      if ( // Confirm we've exited the outer most event handler\n      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\n        isExecutingCallback = true;\n\n        try {\n          do {\n            flushFirstCallback();\n          } while ( // Keep flushing until there are no more immediate callbacks\n          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\n        } finally {\n          isExecutingCallback = false;\n\n          if (firstCallbackNode !== null) {\n            // There's still work remaining. Request another callback.\n            ensureHostCallbackIsScheduled();\n          } else {\n            isHostCallbackScheduled = false;\n          }\n        }\n      }\n    }\n\n    function flushWork(didTimeout) {\n      isExecutingCallback = true;\n      var previousDidTimeout = currentDidTimeout;\n      currentDidTimeout = didTimeout;\n\n      try {\n        if (didTimeout) {\n          // Flush all the expired callbacks without yielding.\n          while (firstCallbackNode !== null) {\n            // Read the current time. Flush all the callbacks that expire at or\n            // earlier than that time. Then read the current time again and repeat.\n            // This optimizes for as few performance.now calls as possible.\n            var currentTime = exports.unstable_now();\n\n            if (firstCallbackNode.expirationTime <= currentTime) {\n              do {\n                flushFirstCallback();\n              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);\n\n              continue;\n            }\n\n            break;\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstCallbackNode !== null) {\n            do {\n              flushFirstCallback();\n            } while (firstCallbackNode !== null && !shouldYieldToHost());\n          }\n        }\n      } finally {\n        isExecutingCallback = false;\n        currentDidTimeout = previousDidTimeout;\n\n        if (firstCallbackNode !== null) {\n          // There's still work remaining. Request another callback.\n          ensureHostCallbackIsScheduled();\n        } else {\n          isHostCallbackScheduled = false;\n        } // Before exiting, flush all the immediate work that was scheduled.\n\n\n        flushImmediateWork();\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      var previousEventStartTime = currentEventStartTime;\n      currentPriorityLevel = priorityLevel;\n      currentEventStartTime = exports.unstable_now();\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.\n\n        flushImmediateWork();\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        var previousEventStartTime = currentEventStartTime;\n        currentPriorityLevel = parentPriorityLevel;\n        currentEventStartTime = exports.unstable_now();\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n          currentEventStartTime = previousEventStartTime;\n          flushImmediateWork();\n        }\n      };\n    }\n\n    function unstable_scheduleCallback(callback, deprecated_options) {\n      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\n      var expirationTime;\n\n      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\n        // FIXME: Remove this branch once we lift expiration times out of React.\n        expirationTime = startTime + deprecated_options.timeout;\n      } else {\n        switch (currentPriorityLevel) {\n          case ImmediatePriority:\n            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\n            break;\n\n          case UserBlockingPriority:\n            expirationTime = startTime + USER_BLOCKING_PRIORITY;\n            break;\n\n          case IdlePriority:\n            expirationTime = startTime + IDLE_PRIORITY;\n            break;\n\n          case NormalPriority:\n          default:\n            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\n        }\n      }\n\n      var newNode = {\n        callback: callback,\n        priorityLevel: currentPriorityLevel,\n        expirationTime: expirationTime,\n        next: null,\n        previous: null\n      }; // Insert the new callback into the list, ordered first by expiration, then\n      // by insertion. So the new callback is inserted any other callback with\n      // equal expiration.\n\n      if (firstCallbackNode === null) {\n        // This is the first callback in the list.\n        firstCallbackNode = newNode.next = newNode.previous = newNode;\n        ensureHostCallbackIsScheduled();\n      } else {\n        var next = null;\n        var node = firstCallbackNode;\n\n        do {\n          if (node.expirationTime > expirationTime) {\n            // The new callback expires before this one.\n            next = node;\n            break;\n          }\n\n          node = node.next;\n        } while (node !== firstCallbackNode);\n\n        if (next === null) {\n          // No callback with a later expiration was found, which means the new\n          // callback has the latest expiration in the list.\n          next = firstCallbackNode;\n        } else if (next === firstCallbackNode) {\n          // The new callback has the earliest expiration in the entire list.\n          firstCallbackNode = newNode;\n          ensureHostCallbackIsScheduled();\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newNode;\n        newNode.next = next;\n        newNode.previous = previous;\n      }\n\n      return newNode;\n    }\n\n    function unstable_cancelCallback(callbackNode) {\n      var next = callbackNode.next;\n\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n\n      if (next === callbackNode) {\n        // This is the only scheduled callback. Clear the list.\n        firstCallbackNode = null;\n      } else {\n        // Remove the callback from its position in the list.\n        if (callbackNode === firstCallbackNode) {\n          firstCallbackNode = next;\n        }\n\n        var previous = callbackNode.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      callbackNode.next = callbackNode.previous = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());\n    } // The remaining code is essentially a polyfill for requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n    // We capture a local reference to any global, in case it gets polyfilled after\n    // this module is initially evaluated. We want to be using a\n    // consistent implementation.\n\n\n    var localDate = Date; // This initialization code may run even on server environments if a component\n    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n    // have setTimeout or clearTimeout. However, we always expect them to be defined\n    // on the client. https://github.com/facebook/react/pull/13088\n\n    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\n    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error\n    // later if they are missing on the client.\n\n    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\n    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If\n    // we're backgrounded we prefer for that work to happen so that the page\n    // continues to load in the background. So we also schedule a 'setTimeout' as\n    // a fallback.\n    // TODO: Need a better heuristic for backgrounded work.\n\n    var ANIMATION_FRAME_TIMEOUT = 100;\n    var rAFID;\n    var rAFTimeoutID;\n\n    var requestAnimationFrameWithTimeout = function requestAnimationFrameWithTimeout(callback) {\n      // schedule rAF and also a setTimeout\n      rAFID = localRequestAnimationFrame(function (timestamp) {\n        // cancel the setTimeout\n        localClearTimeout(rAFTimeoutID);\n        callback(timestamp);\n      });\n      rAFTimeoutID = localSetTimeout(function () {\n        // cancel the requestAnimationFrame\n        localCancelAnimationFrame(rAFID);\n        callback(exports.unstable_now());\n      }, ANIMATION_FRAME_TIMEOUT);\n    };\n\n    if (hasNativePerformanceNow) {\n      var Performance = performance;\n\n      exports.unstable_now = function () {\n        return Performance.now();\n      };\n    } else {\n      exports.unstable_now = function () {\n        return localDate.now();\n      };\n    }\n\n    var _requestHostCallback;\n\n    var cancelHostCallback;\n    var shouldYieldToHost;\n\n    if (typeof window !== 'undefined' && window._schedMock) {\n      // Dynamic injection, only for testing purposes.\n      var impl = window._schedMock;\n      _requestHostCallback = impl[0];\n      cancelHostCallback = impl[1];\n      shouldYieldToHost = impl[2];\n    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // \"addEventListener\" might not be available on the window object\n    // if this is a mocked \"window\" object. So we need to validate that too.\n    typeof window.addEventListener !== 'function') {\n      var _callback = null;\n\n      var _currentTime = -1;\n\n      var _flushCallback = function _flushCallback(didTimeout, ms) {\n        if (_callback !== null) {\n          var cb = _callback;\n          _callback = null;\n\n          try {\n            _currentTime = ms;\n            cb(didTimeout);\n          } finally {\n            _currentTime = -1;\n          }\n        }\n      };\n\n      _requestHostCallback = function requestHostCallback(cb, ms) {\n        if (_currentTime !== -1) {\n          // Protect against re-entrancy.\n          setTimeout(_requestHostCallback, 0, cb, ms);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, ms, true, ms);\n          setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);\n        }\n      };\n\n      cancelHostCallback = function cancelHostCallback() {\n        _callback = null;\n      };\n\n      shouldYieldToHost = function shouldYieldToHost() {\n        return false;\n      };\n\n      exports.unstable_now = function () {\n        return _currentTime === -1 ? 0 : _currentTime;\n      };\n    } else {\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof localRequestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof localCancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      var scheduledHostCallback = null;\n      var isMessageEventScheduled = false;\n      var timeoutTime = -1;\n      var isAnimationFrameScheduled = false;\n      var isFlushingHostCallback = false;\n      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking\n      // will adjust this value to a faster fps if we get more frequent animation\n      // frames.\n\n      var previousFrameTime = 33;\n      var activeFrameTime = 33;\n\n      shouldYieldToHost = function shouldYieldToHost() {\n        return frameDeadline <= exports.unstable_now();\n      }; // We use the postMessage trick to defer idle work until after the repaint.\n\n\n      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n\n      var idleTick = function idleTick(event) {\n        if (event.source !== window || event.data !== messageKey) {\n          return;\n        }\n\n        isMessageEventScheduled = false;\n        var prevScheduledCallback = scheduledHostCallback;\n        var prevTimeoutTime = timeoutTime;\n        scheduledHostCallback = null;\n        timeoutTime = -1;\n        var currentTime = exports.unstable_now();\n        var didTimeout = false;\n\n        if (frameDeadline - currentTime <= 0) {\n          // There's no time left in this idle period. Check if the callback has\n          // a timeout and whether it's been exceeded.\n          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\n            // Exceeded the timeout. Invoke the callback even though there's no\n            // time left.\n            didTimeout = true;\n          } else {\n            // No timeout.\n            if (!isAnimationFrameScheduled) {\n              // Schedule another animation callback so we retry later.\n              isAnimationFrameScheduled = true;\n              requestAnimationFrameWithTimeout(animationTick);\n            } // Exit without invoking the callback.\n\n\n            scheduledHostCallback = prevScheduledCallback;\n            timeoutTime = prevTimeoutTime;\n            return;\n          }\n        }\n\n        if (prevScheduledCallback !== null) {\n          isFlushingHostCallback = true;\n\n          try {\n            prevScheduledCallback(didTimeout);\n          } finally {\n            isFlushingHostCallback = false;\n          }\n        }\n      }; // Assumes that we have addEventListener in this environment. Might need\n      // something better for old IE.\n\n\n      window.addEventListener('message', idleTick, false);\n\n      var animationTick = function animationTick(rafTime) {\n        if (scheduledHostCallback !== null) {\n          // Eagerly schedule the next animation callback at the beginning of the\n          // frame. If the scheduler queue is not empty at the end of the frame, it\n          // will continue flushing inside that callback. If the queue *is* empty,\n          // then it will exit immediately. Posting the callback at the start of the\n          // frame ensures it's fired within the earliest possible frame. If we\n          // waited until the end of the frame to post the callback, we risk the\n          // browser skipping a frame and not firing the callback until the frame\n          // after that.\n          requestAnimationFrameWithTimeout(animationTick);\n        } else {\n          // No pending work. Exit.\n          isAnimationFrameScheduled = false;\n          return;\n        }\n\n        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n\n        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n          if (nextFrameTime < 8) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If the calculated frame time gets lower than 8, it is probably a bug.\n            nextFrameTime = 8;\n          } // If one frame goes long, then the next one can be short to catch up.\n          // If two frames are short in a row, then that's an indication that we\n          // actually have a higher frame rate than what we're currently optimizing.\n          // We adjust our heuristic dynamically accordingly. For example, if we're\n          // running on 120hz display or 90hz VR display.\n          // Take the max of the two in case one of them was an anomaly due to\n          // missed frame deadlines.\n\n\n          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n        } else {\n          previousFrameTime = nextFrameTime;\n        }\n\n        frameDeadline = rafTime + activeFrameTime;\n\n        if (!isMessageEventScheduled) {\n          isMessageEventScheduled = true;\n          window.postMessage(messageKey, '*');\n        }\n      };\n\n      _requestHostCallback = function _requestHostCallback(callback, absoluteTimeout) {\n        scheduledHostCallback = callback;\n        timeoutTime = absoluteTimeout;\n\n        if (isFlushingHostCallback || absoluteTimeout < 0) {\n          // Don't wait for the next frame. Continue working ASAP, in a new event.\n          window.postMessage(messageKey, '*');\n        } else if (!isAnimationFrameScheduled) {\n          // If rAF didn't already schedule one, we need to schedule a frame.\n          // TODO: If this rAF doesn't materialize because the browser throttles, we\n          // might want to still have setTimeout trigger rIC as a backup to ensure\n          // that we keep performing work.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n      };\n\n      cancelHostCallback = function cancelHostCallback() {\n        scheduledHostCallback = null;\n        isMessageEventScheduled = false;\n        timeoutTime = -1;\n      };\n    }\n\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n  })();\n}","map":{"version":3,"sources":["C:/Users/Gowal/Documents/GitHub/SwampTrash/node_modules/scheduler/cjs/scheduler.development.js"],"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","IDLE_PRIORITY","firstCallbackNode","currentDidTimeout","currentPriorityLevel","currentEventStartTime","currentExpirationTime","isExecutingCallback","isHostCallbackScheduled","hasNativePerformanceNow","performance","now","ensureHostCallbackIsScheduled","expirationTime","cancelHostCallback","requestHostCallback","flushWork","flushFirstCallback","flushedNode","next","lastCallbackNode","previous","callback","priorityLevel","previousPriorityLevel","previousExpirationTime","continuationCallback","continuationNode","nextAfterContinuation","node","flushImmediateWork","didTimeout","previousDidTimeout","currentTime","unstable_now","shouldYieldToHost","unstable_runWithPriority","eventHandler","previousEventStartTime","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","deprecated_options","startTime","timeout","newNode","unstable_cancelCallback","callbackNode","unstable_getCurrentPriorityLevel","unstable_shouldYield","localDate","Date","localSetTimeout","setTimeout","undefined","localClearTimeout","clearTimeout","localRequestAnimationFrame","requestAnimationFrame","localCancelAnimationFrame","cancelAnimationFrame","ANIMATION_FRAME_TIMEOUT","rAFID","rAFTimeoutID","requestAnimationFrameWithTimeout","timestamp","Performance","window","_schedMock","impl","addEventListener","_callback","_currentTime","_flushCallback","ms","cb","console","error","scheduledHostCallback","isMessageEventScheduled","timeoutTime","isAnimationFrameScheduled","isFlushingHostCallback","frameDeadline","previousFrameTime","activeFrameTime","messageKey","Math","random","toString","slice","idleTick","event","source","data","prevScheduledCallback","prevTimeoutTime","animationTick","rafTime","nextFrameTime","postMessage","absoluteTimeout","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority"],"mappings":"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","sourcesContent":["/** @license React v16.6.1\r\n * scheduler.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n/* eslint-disable no-var */\r\n\r\n// TODO: Use symbols?\r\nvar ImmediatePriority = 1;\r\nvar UserBlockingPriority = 2;\r\nvar NormalPriority = 3;\r\nvar IdlePriority = 4;\r\n\r\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\r\n// Math.pow(2, 30) - 1\r\n// 0b111111111111111111111111111111\r\nvar maxSigned31BitInt = 1073741823;\r\n\r\n// Times out immediately\r\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\r\n// Eventually times out\r\nvar USER_BLOCKING_PRIORITY = 250;\r\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\r\n// Never times out\r\nvar IDLE_PRIORITY = maxSigned31BitInt;\r\n\r\n// Callbacks are stored as a circular, doubly linked list.\r\nvar firstCallbackNode = null;\r\n\r\nvar currentDidTimeout = false;\r\nvar currentPriorityLevel = NormalPriority;\r\nvar currentEventStartTime = -1;\r\nvar currentExpirationTime = -1;\r\n\r\n// This is set when a callback is being executed, to prevent re-entrancy.\r\nvar isExecutingCallback = false;\r\n\r\nvar isHostCallbackScheduled = false;\r\n\r\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\r\n\r\nfunction ensureHostCallbackIsScheduled() {\r\n  if (isExecutingCallback) {\r\n    // Don't schedule work yet; wait until the next time we yield.\r\n    return;\r\n  }\r\n  // Schedule the host callback using the earliest expiration in the list.\r\n  var expirationTime = firstCallbackNode.expirationTime;\r\n  if (!isHostCallbackScheduled) {\r\n    isHostCallbackScheduled = true;\r\n  } else {\r\n    // Cancel the existing host callback.\r\n    cancelHostCallback();\r\n  }\r\n  requestHostCallback(flushWork, expirationTime);\r\n}\r\n\r\nfunction flushFirstCallback() {\r\n  var flushedNode = firstCallbackNode;\r\n\r\n  // Remove the node from the list before calling the callback. That way the\r\n  // list is in a consistent state even if the callback throws.\r\n  var next = firstCallbackNode.next;\r\n  if (firstCallbackNode === next) {\r\n    // This is the last callback in the list.\r\n    firstCallbackNode = null;\r\n    next = null;\r\n  } else {\r\n    var lastCallbackNode = firstCallbackNode.previous;\r\n    firstCallbackNode = lastCallbackNode.next = next;\r\n    next.previous = lastCallbackNode;\r\n  }\r\n\r\n  flushedNode.next = flushedNode.previous = null;\r\n\r\n  // Now it's safe to call the callback.\r\n  var callback = flushedNode.callback;\r\n  var expirationTime = flushedNode.expirationTime;\r\n  var priorityLevel = flushedNode.priorityLevel;\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  var previousExpirationTime = currentExpirationTime;\r\n  currentPriorityLevel = priorityLevel;\r\n  currentExpirationTime = expirationTime;\r\n  var continuationCallback;\r\n  try {\r\n    continuationCallback = callback();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    currentExpirationTime = previousExpirationTime;\r\n  }\r\n\r\n  // A callback may return a continuation. The continuation should be scheduled\r\n  // with the same priority and expiration as the just-finished callback.\r\n  if (typeof continuationCallback === 'function') {\r\n    var continuationNode = {\r\n      callback: continuationCallback,\r\n      priorityLevel: priorityLevel,\r\n      expirationTime: expirationTime,\r\n      next: null,\r\n      previous: null\r\n    };\r\n\r\n    // Insert the new callback into the list, sorted by its expiration. This is\r\n    // almost the same as the code in `scheduleCallback`, except the callback\r\n    // is inserted into the list *before* callbacks of equal expiration instead\r\n    // of after.\r\n    if (firstCallbackNode === null) {\r\n      // This is the first callback in the list.\r\n      firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;\r\n    } else {\r\n      var nextAfterContinuation = null;\r\n      var node = firstCallbackNode;\r\n      do {\r\n        if (node.expirationTime >= expirationTime) {\r\n          // This callback expires at or after the continuation. We will insert\r\n          // the continuation *before* this callback.\r\n          nextAfterContinuation = node;\r\n          break;\r\n        }\r\n        node = node.next;\r\n      } while (node !== firstCallbackNode);\r\n\r\n      if (nextAfterContinuation === null) {\r\n        // No equal or lower priority callback was found, which means the new\r\n        // callback is the lowest priority callback in the list.\r\n        nextAfterContinuation = firstCallbackNode;\r\n      } else if (nextAfterContinuation === firstCallbackNode) {\r\n        // The new callback is the highest priority callback in the list.\r\n        firstCallbackNode = continuationNode;\r\n        ensureHostCallbackIsScheduled();\r\n      }\r\n\r\n      var previous = nextAfterContinuation.previous;\r\n      previous.next = nextAfterContinuation.previous = continuationNode;\r\n      continuationNode.next = nextAfterContinuation;\r\n      continuationNode.previous = previous;\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushImmediateWork() {\r\n  if (\r\n  // Confirm we've exited the outer most event handler\r\n  currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {\r\n    isExecutingCallback = true;\r\n    try {\r\n      do {\r\n        flushFirstCallback();\r\n      } while (\r\n      // Keep flushing until there are no more immediate callbacks\r\n      firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);\r\n    } finally {\r\n      isExecutingCallback = false;\r\n      if (firstCallbackNode !== null) {\r\n        // There's still work remaining. Request another callback.\r\n        ensureHostCallbackIsScheduled();\r\n      } else {\r\n        isHostCallbackScheduled = false;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction flushWork(didTimeout) {\r\n  isExecutingCallback = true;\r\n  var previousDidTimeout = currentDidTimeout;\r\n  currentDidTimeout = didTimeout;\r\n  try {\r\n    if (didTimeout) {\r\n      // Flush all the expired callbacks without yielding.\r\n      while (firstCallbackNode !== null) {\r\n        // Read the current time. Flush all the callbacks that expire at or\r\n        // earlier than that time. Then read the current time again and repeat.\r\n        // This optimizes for as few performance.now calls as possible.\r\n        var currentTime = exports.unstable_now();\r\n        if (firstCallbackNode.expirationTime <= currentTime) {\r\n          do {\r\n            flushFirstCallback();\r\n          } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime);\r\n          continue;\r\n        }\r\n        break;\r\n      }\r\n    } else {\r\n      // Keep flushing callbacks until we run out of time in the frame.\r\n      if (firstCallbackNode !== null) {\r\n        do {\r\n          flushFirstCallback();\r\n        } while (firstCallbackNode !== null && !shouldYieldToHost());\r\n      }\r\n    }\r\n  } finally {\r\n    isExecutingCallback = false;\r\n    currentDidTimeout = previousDidTimeout;\r\n    if (firstCallbackNode !== null) {\r\n      // There's still work remaining. Request another callback.\r\n      ensureHostCallbackIsScheduled();\r\n    } else {\r\n      isHostCallbackScheduled = false;\r\n    }\r\n    // Before exiting, flush all the immediate work that was scheduled.\r\n    flushImmediateWork();\r\n  }\r\n}\r\n\r\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\r\n  switch (priorityLevel) {\r\n    case ImmediatePriority:\r\n    case UserBlockingPriority:\r\n    case NormalPriority:\r\n    case IdlePriority:\r\n      break;\r\n    default:\r\n      priorityLevel = NormalPriority;\r\n  }\r\n\r\n  var previousPriorityLevel = currentPriorityLevel;\r\n  var previousEventStartTime = currentEventStartTime;\r\n  currentPriorityLevel = priorityLevel;\r\n  currentEventStartTime = exports.unstable_now();\r\n\r\n  try {\r\n    return eventHandler();\r\n  } finally {\r\n    currentPriorityLevel = previousPriorityLevel;\r\n    currentEventStartTime = previousEventStartTime;\r\n\r\n    // Before exiting, flush all the immediate work that was scheduled.\r\n    flushImmediateWork();\r\n  }\r\n}\r\n\r\nfunction unstable_wrapCallback(callback) {\r\n  var parentPriorityLevel = currentPriorityLevel;\r\n  return function () {\r\n    // This is a fork of runWithPriority, inlined for performance.\r\n    var previousPriorityLevel = currentPriorityLevel;\r\n    var previousEventStartTime = currentEventStartTime;\r\n    currentPriorityLevel = parentPriorityLevel;\r\n    currentEventStartTime = exports.unstable_now();\r\n\r\n    try {\r\n      return callback.apply(this, arguments);\r\n    } finally {\r\n      currentPriorityLevel = previousPriorityLevel;\r\n      currentEventStartTime = previousEventStartTime;\r\n      flushImmediateWork();\r\n    }\r\n  };\r\n}\r\n\r\nfunction unstable_scheduleCallback(callback, deprecated_options) {\r\n  var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();\r\n\r\n  var expirationTime;\r\n  if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {\r\n    // FIXME: Remove this branch once we lift expiration times out of React.\r\n    expirationTime = startTime + deprecated_options.timeout;\r\n  } else {\r\n    switch (currentPriorityLevel) {\r\n      case ImmediatePriority:\r\n        expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;\r\n        break;\r\n      case UserBlockingPriority:\r\n        expirationTime = startTime + USER_BLOCKING_PRIORITY;\r\n        break;\r\n      case IdlePriority:\r\n        expirationTime = startTime + IDLE_PRIORITY;\r\n        break;\r\n      case NormalPriority:\r\n      default:\r\n        expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;\r\n    }\r\n  }\r\n\r\n  var newNode = {\r\n    callback: callback,\r\n    priorityLevel: currentPriorityLevel,\r\n    expirationTime: expirationTime,\r\n    next: null,\r\n    previous: null\r\n  };\r\n\r\n  // Insert the new callback into the list, ordered first by expiration, then\r\n  // by insertion. So the new callback is inserted any other callback with\r\n  // equal expiration.\r\n  if (firstCallbackNode === null) {\r\n    // This is the first callback in the list.\r\n    firstCallbackNode = newNode.next = newNode.previous = newNode;\r\n    ensureHostCallbackIsScheduled();\r\n  } else {\r\n    var next = null;\r\n    var node = firstCallbackNode;\r\n    do {\r\n      if (node.expirationTime > expirationTime) {\r\n        // The new callback expires before this one.\r\n        next = node;\r\n        break;\r\n      }\r\n      node = node.next;\r\n    } while (node !== firstCallbackNode);\r\n\r\n    if (next === null) {\r\n      // No callback with a later expiration was found, which means the new\r\n      // callback has the latest expiration in the list.\r\n      next = firstCallbackNode;\r\n    } else if (next === firstCallbackNode) {\r\n      // The new callback has the earliest expiration in the entire list.\r\n      firstCallbackNode = newNode;\r\n      ensureHostCallbackIsScheduled();\r\n    }\r\n\r\n    var previous = next.previous;\r\n    previous.next = next.previous = newNode;\r\n    newNode.next = next;\r\n    newNode.previous = previous;\r\n  }\r\n\r\n  return newNode;\r\n}\r\n\r\nfunction unstable_cancelCallback(callbackNode) {\r\n  var next = callbackNode.next;\r\n  if (next === null) {\r\n    // Already cancelled.\r\n    return;\r\n  }\r\n\r\n  if (next === callbackNode) {\r\n    // This is the only scheduled callback. Clear the list.\r\n    firstCallbackNode = null;\r\n  } else {\r\n    // Remove the callback from its position in the list.\r\n    if (callbackNode === firstCallbackNode) {\r\n      firstCallbackNode = next;\r\n    }\r\n    var previous = callbackNode.previous;\r\n    previous.next = next;\r\n    next.previous = previous;\r\n  }\r\n\r\n  callbackNode.next = callbackNode.previous = null;\r\n}\r\n\r\nfunction unstable_getCurrentPriorityLevel() {\r\n  return currentPriorityLevel;\r\n}\r\n\r\nfunction unstable_shouldYield() {\r\n  return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());\r\n}\r\n\r\n// The remaining code is essentially a polyfill for requestIdleCallback. It\r\n// works by scheduling a requestAnimationFrame, storing the time for the start\r\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\r\n// Within the postMessage handler do as much work as possible until time + frame\r\n// rate. By separating the idle call into a separate event tick we ensure that\r\n// layout, paint and other browser work is counted against the available time.\r\n// The frame rate is dynamically adjusted.\r\n\r\n// We capture a local reference to any global, in case it gets polyfilled after\r\n// this module is initially evaluated. We want to be using a\r\n// consistent implementation.\r\nvar localDate = Date;\r\n\r\n// This initialization code may run even on server environments if a component\r\n// just imports ReactDOM (e.g. for findDOMNode). Some environments might not\r\n// have setTimeout or clearTimeout. However, we always expect them to be defined\r\n// on the client. https://github.com/facebook/react/pull/13088\r\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\r\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\r\n\r\n// We don't expect either of these to necessarily be defined, but we will error\r\n// later if they are missing on the client.\r\nvar localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\r\nvar localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;\r\n\r\n// requestAnimationFrame does not run when the tab is in the background. If\r\n// we're backgrounded we prefer for that work to happen so that the page\r\n// continues to load in the background. So we also schedule a 'setTimeout' as\r\n// a fallback.\r\n// TODO: Need a better heuristic for backgrounded work.\r\nvar ANIMATION_FRAME_TIMEOUT = 100;\r\nvar rAFID;\r\nvar rAFTimeoutID;\r\nvar requestAnimationFrameWithTimeout = function (callback) {\r\n  // schedule rAF and also a setTimeout\r\n  rAFID = localRequestAnimationFrame(function (timestamp) {\r\n    // cancel the setTimeout\r\n    localClearTimeout(rAFTimeoutID);\r\n    callback(timestamp);\r\n  });\r\n  rAFTimeoutID = localSetTimeout(function () {\r\n    // cancel the requestAnimationFrame\r\n    localCancelAnimationFrame(rAFID);\r\n    callback(exports.unstable_now());\r\n  }, ANIMATION_FRAME_TIMEOUT);\r\n};\r\n\r\nif (hasNativePerformanceNow) {\r\n  var Performance = performance;\r\n  exports.unstable_now = function () {\r\n    return Performance.now();\r\n  };\r\n} else {\r\n  exports.unstable_now = function () {\r\n    return localDate.now();\r\n  };\r\n}\r\n\r\nvar requestHostCallback;\r\nvar cancelHostCallback;\r\nvar shouldYieldToHost;\r\n\r\nif (typeof window !== 'undefined' && window._schedMock) {\r\n  // Dynamic injection, only for testing purposes.\r\n  var impl = window._schedMock;\r\n  requestHostCallback = impl[0];\r\n  cancelHostCallback = impl[1];\r\n  shouldYieldToHost = impl[2];\r\n} else if (\r\n// If Scheduler runs in a non-DOM environment, it falls back to a naive\r\n// implementation using setTimeout.\r\ntypeof window === 'undefined' ||\r\n// \"addEventListener\" might not be available on the window object\r\n// if this is a mocked \"window\" object. So we need to validate that too.\r\ntypeof window.addEventListener !== 'function') {\r\n  var _callback = null;\r\n  var _currentTime = -1;\r\n  var _flushCallback = function (didTimeout, ms) {\r\n    if (_callback !== null) {\r\n      var cb = _callback;\r\n      _callback = null;\r\n      try {\r\n        _currentTime = ms;\r\n        cb(didTimeout);\r\n      } finally {\r\n        _currentTime = -1;\r\n      }\r\n    }\r\n  };\r\n  requestHostCallback = function (cb, ms) {\r\n    if (_currentTime !== -1) {\r\n      // Protect against re-entrancy.\r\n      setTimeout(requestHostCallback, 0, cb, ms);\r\n    } else {\r\n      _callback = cb;\r\n      setTimeout(_flushCallback, ms, true, ms);\r\n      setTimeout(_flushCallback, maxSigned31BitInt, false, maxSigned31BitInt);\r\n    }\r\n  };\r\n  cancelHostCallback = function () {\r\n    _callback = null;\r\n  };\r\n  shouldYieldToHost = function () {\r\n    return false;\r\n  };\r\n  exports.unstable_now = function () {\r\n    return _currentTime === -1 ? 0 : _currentTime;\r\n  };\r\n} else {\r\n  if (typeof console !== 'undefined') {\r\n    // TODO: Remove fb.me link\r\n    if (typeof localRequestAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n    if (typeof localCancelAnimationFrame !== 'function') {\r\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\r\n    }\r\n  }\r\n\r\n  var scheduledHostCallback = null;\r\n  var isMessageEventScheduled = false;\r\n  var timeoutTime = -1;\r\n\r\n  var isAnimationFrameScheduled = false;\r\n\r\n  var isFlushingHostCallback = false;\r\n\r\n  var frameDeadline = 0;\r\n  // We start out assuming that we run at 30fps but then the heuristic tracking\r\n  // will adjust this value to a faster fps if we get more frequent animation\r\n  // frames.\r\n  var previousFrameTime = 33;\r\n  var activeFrameTime = 33;\r\n\r\n  shouldYieldToHost = function () {\r\n    return frameDeadline <= exports.unstable_now();\r\n  };\r\n\r\n  // We use the postMessage trick to defer idle work until after the repaint.\r\n  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\r\n  var idleTick = function (event) {\r\n    if (event.source !== window || event.data !== messageKey) {\r\n      return;\r\n    }\r\n\r\n    isMessageEventScheduled = false;\r\n\r\n    var prevScheduledCallback = scheduledHostCallback;\r\n    var prevTimeoutTime = timeoutTime;\r\n    scheduledHostCallback = null;\r\n    timeoutTime = -1;\r\n\r\n    var currentTime = exports.unstable_now();\r\n\r\n    var didTimeout = false;\r\n    if (frameDeadline - currentTime <= 0) {\r\n      // There's no time left in this idle period. Check if the callback has\r\n      // a timeout and whether it's been exceeded.\r\n      if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {\r\n        // Exceeded the timeout. Invoke the callback even though there's no\r\n        // time left.\r\n        didTimeout = true;\r\n      } else {\r\n        // No timeout.\r\n        if (!isAnimationFrameScheduled) {\r\n          // Schedule another animation callback so we retry later.\r\n          isAnimationFrameScheduled = true;\r\n          requestAnimationFrameWithTimeout(animationTick);\r\n        }\r\n        // Exit without invoking the callback.\r\n        scheduledHostCallback = prevScheduledCallback;\r\n        timeoutTime = prevTimeoutTime;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (prevScheduledCallback !== null) {\r\n      isFlushingHostCallback = true;\r\n      try {\r\n        prevScheduledCallback(didTimeout);\r\n      } finally {\r\n        isFlushingHostCallback = false;\r\n      }\r\n    }\r\n  };\r\n  // Assumes that we have addEventListener in this environment. Might need\r\n  // something better for old IE.\r\n  window.addEventListener('message', idleTick, false);\r\n\r\n  var animationTick = function (rafTime) {\r\n    if (scheduledHostCallback !== null) {\r\n      // Eagerly schedule the next animation callback at the beginning of the\r\n      // frame. If the scheduler queue is not empty at the end of the frame, it\r\n      // will continue flushing inside that callback. If the queue *is* empty,\r\n      // then it will exit immediately. Posting the callback at the start of the\r\n      // frame ensures it's fired within the earliest possible frame. If we\r\n      // waited until the end of the frame to post the callback, we risk the\r\n      // browser skipping a frame and not firing the callback until the frame\r\n      // after that.\r\n      requestAnimationFrameWithTimeout(animationTick);\r\n    } else {\r\n      // No pending work. Exit.\r\n      isAnimationFrameScheduled = false;\r\n      return;\r\n    }\r\n\r\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\r\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\r\n      if (nextFrameTime < 8) {\r\n        // Defensive coding. We don't support higher frame rates than 120hz.\r\n        // If the calculated frame time gets lower than 8, it is probably a bug.\r\n        nextFrameTime = 8;\r\n      }\r\n      // If one frame goes long, then the next one can be short to catch up.\r\n      // If two frames are short in a row, then that's an indication that we\r\n      // actually have a higher frame rate than what we're currently optimizing.\r\n      // We adjust our heuristic dynamically accordingly. For example, if we're\r\n      // running on 120hz display or 90hz VR display.\r\n      // Take the max of the two in case one of them was an anomaly due to\r\n      // missed frame deadlines.\r\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\r\n    } else {\r\n      previousFrameTime = nextFrameTime;\r\n    }\r\n    frameDeadline = rafTime + activeFrameTime;\r\n    if (!isMessageEventScheduled) {\r\n      isMessageEventScheduled = true;\r\n      window.postMessage(messageKey, '*');\r\n    }\r\n  };\r\n\r\n  requestHostCallback = function (callback, absoluteTimeout) {\r\n    scheduledHostCallback = callback;\r\n    timeoutTime = absoluteTimeout;\r\n    if (isFlushingHostCallback || absoluteTimeout < 0) {\r\n      // Don't wait for the next frame. Continue working ASAP, in a new event.\r\n      window.postMessage(messageKey, '*');\r\n    } else if (!isAnimationFrameScheduled) {\r\n      // If rAF didn't already schedule one, we need to schedule a frame.\r\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\r\n      // might want to still have setTimeout trigger rIC as a backup to ensure\r\n      // that we keep performing work.\r\n      isAnimationFrameScheduled = true;\r\n      requestAnimationFrameWithTimeout(animationTick);\r\n    }\r\n  };\r\n\r\n  cancelHostCallback = function () {\r\n    scheduledHostCallback = null;\r\n    isMessageEventScheduled = false;\r\n    timeoutTime = -1;\r\n  };\r\n}\r\n\r\nexports.unstable_ImmediatePriority = ImmediatePriority;\r\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\r\nexports.unstable_NormalPriority = NormalPriority;\r\nexports.unstable_IdlePriority = IdlePriority;\r\nexports.unstable_runWithPriority = unstable_runWithPriority;\r\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\r\nexports.unstable_cancelCallback = unstable_cancelCallback;\r\nexports.unstable_wrapCallback = unstable_wrapCallback;\r\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\r\nexports.unstable_shouldYield = unstable_shouldYield;\r\n  })();\r\n}\r\n"]},"metadata":{},"sourceType":"script"}